-- updating total_sales in order_items table 

alter table order_items 
add column total_sales float;

update  order_items
set total_sales = quantity * price_per_unit;

select oi.product_id , p.product_name  ,  sum(oi.total_sales) as total_sales , count (o.order_id) as quantity 
from orders as  o
join order_items as oi 
on o.order_id = oi.order_id
join products as p 
on oi.product_id = p.product_id
group by 1 , 2  
order by total_sales desc
limit 10
;


-- top 10 product by total sales value 
with cte as (
	select p.product_name  , o.order_id , oi.order_item_id , oi.quantity , oi.total_sales 
	from orders as  o
	join order_items as oi 
	on o.order_id = oi.order_id
	join products as p 
	on oi.product_id = p.product_id 
) select  product_name  , count(quantity) as quantity ,   sum(total_sales) as total_sales  from cte 
group by product_name   order by sum(total_sales)
desc limit 10 ; 


-- total revene generated by each product category 
-- solution
with cte as (
	select p.product_name , p.category_id ,  o.order_id , oi.product_id , oi.total_sales  from orders as o 
	join order_items as oi on o.order_id = oi.order_id
	join products as p on oi.product_id = p.product_id 
), 
 cte_1 as (
	select category_id , ROUND(SUM(total_sales)) AS total_sales  from cte 
	group by 1   
)SELECT c1.category_id, 
		ct.category_name , 
       c1.total_sales, 
       CONCAT(ROUND(cast((total_sales * 100.0) / (SELECT SUM(total_sales) FROM cte_1) as decimal(10 , 2)) ,2 ) , ' %') AS percentage  
FROM cte_1 AS c1
LEFT JOIN category as ct on c1.category_id = ct.category_id ;


SELECT 
	p.category_id,
	c.category_name,
	SUM(oi.total_sales) as total_sales,
	SUM(oi.total_sales)/
					(SELECT SUM(total_sales) FROM order_items) 
					* 100
	as contribution
FROM order_items as oi
JOIN
products as p
ON p.product_id = oi.product_id
LEFT JOIN category as c
ON c.category_id = p.category_id
GROUP BY 1, 2
ORDER BY 3 DESC

-- 3 average order value for each customer

with cte as ( 
select o.customer_id ,
count( o.order_id ) as number_of_order,  
sum(oi.total_sales)as total_spent  
from 
orders  as o 
join 
order_items as oi 
on o.order_id = oi.order_id  group by 1  ) 
select customer_id , number_of_order , total_spent ,
round ( cast((total_spent/number_of_order) as decimal(10,2)) , 2 )  as average_order_value from cte   
where number_of_order  > 5  
order by number_of_order desc ;  


-- problem 	4 Monthly sales trend query monthly total sales over the past year 


-- last 1 year data 
-- each month - their sales and their previous month sales 
-- window function lag 

select 
year , month , total_sale as current_month_sale ,
lag(total_sale , 1 ) over() as last_month_sale
from (
	select 
	extract(month from order_date) as month ,
	extract ( year from order_date) as year , 
	round(sum(oi.total_sales :: numeric ) , 2 ) as total_sale  
	from orders as o
	join 
	order_items as oi 
	on oi.order_id = o.order_id 
	where o.order_date >=  current_date - interval '2 year' 
	group by 1,2 
	order by 2,1 
)


select current_date - interval '1 month' as date 



--- question 5 customer who are registered but did not place any order 

select customer_id from customers ;  -- there are only 898 customers 
select distinct customer_id from orders ;  -- there are only 686 customers that have made the order 


select 
concat( c.first_name ,' ' , c.last_name ) ,
c.customer_id ,
c.state 
from 
customers as c left outer join
orders as o
on c.customer_id = o.customer_id 
where o.customer_id is null 

-- question 6 .  least selling category by state 
-- identify the least selling category 
-- include total sales for that category in each state 

select * from category  ; -- there are 6 category 
select distinct ( state ) from customers ;  -- total 49 state 
select count ( order_id )  from  orders ; -- 21629 orders
select order_id  , product_id , total_sales from order_items;
select * from products ;



with ranking_categories as ( 
select   
 c.state , p.category_id  ,  sum(oi.total_sales)
 , rank() over(partition by c.state order by sum ( oi.total_sales) asc  ) as ranking
from order_items as oi 
join products as p 
on oi.product_id = p.product_id 
join orders as o 
on oi.order_id = o.order_id 
join 
customers as c  on c.customer_id = o.customer_id
group by c.state , p.category_id
order by 1 , 2
)
select * from ranking_categories 
where ranking = 1 ;

-- customer lifetime value 

select distinct customer_id from orders ; -- 686 customers form 
-- there are total 898 customers 
-- this means that we have to find total amount of money spent by each customers and then rank them 

with rank_table as (
	select  c.customer_id , c.first_name , count(o.order_id) , sum(oi.total_sales) as total_spent from orders as o 
	join order_items as oi on o.order_id = oi.order_id
	join customers as c on o.customer_id = c.customer_id 
	group by 1 , 2 
	order by 4 desc 	
) select * , rank() over(order by total_spent desc ) as rank from rank_table ;



-- Identify orders where the shipping date is later than 3 days after the order date.
--Challenge: Include customer, order details, and delivery provider.

select * from products ;



select o.order_id , o.order_date , s.shipping_date ,s.shipping_providers ,  (s.shipping_date - o.order_date) as number_of_days 
from 
orders as o 
join 
shippings as s on o.order_id = s.order_id 
where (s.shipping_date - o.order_date) > 3 ;



-- top sellers based on total_sales , also percentage of failed and succesfull payment 
select * from category ;  
select * from order_items ; 
select * from orders ; 
select * from customers; 
select * from shippings ;
select * from  sellers ; 

select distinct delivery_status from shippings ; 


select distinct order_status from orders ; 

WITH top_sellers
AS
(SELECT 
	s.seller_id,
	s.seller_name,
	SUM(oi.total_sales) as total_sale
FROM orders as o
JOIN
sellers as s
ON o.seller_id = s.seller_id
JOIN 
order_items as oi
ON oi.order_id = o.order_id
GROUP BY 1, 2
ORDER BY 3 DESC
LIMIT 5
),
sellers_table 
AS
(SELECT 
	o.seller_id,
	ts.seller_name,
	o.order_status,
	COUNT(*) as total_orders
FROM orders as o
JOIN 
top_sellers as ts
ON ts.seller_id = o.seller_id
WHERE 
	o.order_status NOT IN ('Inprogress', 'Returned')
GROUP BY 1, 2, 3
)
SELECT 
	seller_id,
	seller_name,
	SUM(CASE WHEN order_status = 'Completed' THEN total_orders ELSE 0 END) as Completed_orders,
	SUM(CASE WHEN order_status = 'Cancelled' THEN total_orders ELSE 0 END) as Cancelled_orders,
	SUM(total_orders) as total_orders,
	SUM(CASE WHEN order_status = 'Completed' THEN total_orders ELSE 0 END)::numeric/
	SUM(total_orders)::numeric * 100 as successful_orders_percentage
FROM sellers_table
GROUP BY 1, 2



